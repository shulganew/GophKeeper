// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Card defines model for Card.
type Card struct {
	// CardID id card data
	CardID string `json:"cardID"`

	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Gfile defines model for Gfile.
type Gfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`

	// GfileID file id - secret_id in DB.
	GfileID string `json:"gfileID"`
}

// Gtext defines model for Gtext.
type Gtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// GtextID id card data
	GtextID string `json:"gtextID"`

	// Note main text data
	Note string `json:"note"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// NewGfile defines model for NewGfile.
type NewGfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`
}

// NewGtext defines model for NewGtext.
type NewGtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Note main text data
	Note string `json:"note"`
}

// NewSite defines model for NewSite.
type NewSite struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Users email
	Email string `json:"email"`

	// Login User login from registration
	Login string `json:"login"`

	// Password User pass from registartion
	Password string `json:"password"`
}

// Site defines model for Site.
type Site struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// SiteID site id (credintial_id)
	SiteID string `json:"siteID"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = NewUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = NewCard

// AddGtextJSONRequestBody defines body for AddGtext for application/json ContentType.
type AddGtextJSONRequestBody = NewGtext

// AddSiteJSONRequestBody defines body for AddSite for application/json ContentType.
type AddSiteJSONRequestBody = NewSite

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /api/auth/register)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Add new debit card
	// (POST /api/user/card/add)
	AddCard(w http.ResponseWriter, r *http.Request)
	// get all users card data
	// (GET /api/user/card/list)
	ListCards(w http.ResponseWriter, r *http.Request)
	// Upload file
	// (POST /api/user/file/add)
	AddGfile(w http.ResponseWriter, r *http.Request)
	// get all users files data
	// (GET /api/user/file/list)
	ListGfiles(w http.ResponseWriter, r *http.Request)
	// download file from storage by file ID
	// (GET /api/user/file/{fileID})
	GetGfile(w http.ResponseWriter, r *http.Request, fileID string)
	// Add new text note
	// (POST /api/user/gtext/add)
	AddGtext(w http.ResponseWriter, r *http.Request)
	// get all users notes data
	// (GET /api/user/gtext/list)
	ListGtexts(w http.ResponseWriter, r *http.Request)
	// Add new site
	// (POST /api/user/site/add)
	AddSite(w http.ResponseWriter, r *http.Request)
	// get all users sites data
	// (GET /api/user/site/list)
	ListSites(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /api/auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /api/auth/register)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new debit card
// (POST /api/user/card/add)
func (_ Unimplemented) AddCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users card data
// (GET /api/user/card/list)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload file
// (POST /api/user/file/add)
func (_ Unimplemented) AddGfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users files data
// (GET /api/user/file/list)
func (_ Unimplemented) ListGfiles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// download file from storage by file ID
// (GET /api/user/file/{fileID})
func (_ Unimplemented) GetGfile(w http.ResponseWriter, r *http.Request, fileID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new text note
// (POST /api/user/gtext/add)
func (_ Unimplemented) AddGtext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users notes data
// (GET /api/user/gtext/list)
func (_ Unimplemented) ListGtexts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new site
// (POST /api/user/site/add)
func (_ Unimplemented) AddSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users sites data
// (GET /api/user/site/list)
func (_ Unimplemented) ListSites(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCard operation middleware
func (siw *ServerInterfaceWrapper) AddCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGfile operation middleware
func (siw *ServerInterfaceWrapper) AddGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGfiles operation middleware
func (siw *ServerInterfaceWrapper) ListGfiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGfiles(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGfile operation middleware
func (siw *ServerInterfaceWrapper) GetGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileID" -------------
	var fileID string

	err = runtime.BindStyledParameterWithOptions("simple", "fileID", chi.URLParam(r, "fileID"), &fileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGfile(w, r, fileID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGtext operation middleware
func (siw *ServerInterfaceWrapper) AddGtext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGtext(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGtexts operation middleware
func (siw *ServerInterfaceWrapper) ListGtexts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGtexts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddSite operation middleware
func (siw *ServerInterfaceWrapper) AddSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSites operation middleware
func (siw *ServerInterfaceWrapper) ListSites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSites(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/register", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/card/add", wrapper.AddCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/card/list", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/file/add", wrapper.AddGfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/file/list", wrapper.ListGfiles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/file/{fileID}", wrapper.GetGfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/gtext/add", wrapper.AddGtext)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/gtext/list", wrapper.ListGtexts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/site/add", wrapper.AddSite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/site/list", wrapper.ListSites)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX28bNxL/KgTvgOSAtaQ4uYfT0zl26goNnKKu0YcgCOjlSGKzS25IrmXX0HcvZsiV",
	"VlrKkh3bFdo8WSY5nD/8zW+G3Fuem7IyGrR3fHjLXT6FUtDPY2El/hVF8WHMhx9v+b8tjPmQ/6u/lOlH",
	"gf4ZzEhgnt3yypoKrFdA++TCytEJ/pLgcqsqr4zmQ64kwykmhRc842NjS+H5kDtvlZ7wjPubCpb/z+cZ",
	"t/C1VhYkH35stv00/zTP+DtrjUUVa6qNhK5iWsxorqVWaf/6cKlVaQ8TsHye8RKcE5ONGzXTWw0OCpvl",
	"aPbpWBVwrxgHiW6QJzieijKOMyXZAXOQW/CflWRKs5O3vQfEvNESgn7q4drfz3qSSFiP40+AkWbfYG8D",
	"0S5Mct1VnVuQygf1ui4vwXbVZTy/ukqIoswVWDVWucAxdiWKGlLyEsZKqyC3vs2xKUuj8dw8WM/ak4md",
	"4LrqbgHXlbJJxdNCdpdPTSFTfq6FtWV0RsEL2kM0wtYx3guArwb8Hl5PQQSTtp59xsdalIk0/QFTAKeY",
	"0cxPgdUO7AvHnFplgB1BteJ9UNl42yTEs3irjU84WwqlGdrx0JxZcY90RO/Olf+2o9wCYKdS/qBWdvHL",
	"+6REYSYqoZeG2dhYRnumJKtZV6wSzs2MvUPwrlBFiWhTUBEjd+EgUZygFKroWoGLHQuTCcs3uIxSLPpt",
	"TcksTJTzVmwKdvRVbtgJp9sbCZveaC0gje+L3bPoJQaiwc/O1YIEusUCA52qFTiOle4lMbf2ShSflfzP",
	"A1IgasCqgVNKj03oJrQXuW+dHReV8iDK/7uZmEzA9pTBpCEW4udhjB39PGK/gih5xmuLQlPvKzfs91tC",
	"VAnazpyaavoTQAWWKceEg6+1Vf6GNZFlDuyVyoG9xB90Ytajr4XKQTsKdLTjqBL5FNhhb9CxYDab9QRN",
	"94yd9KOs678fHb87O393cNgb9Ka+LNA+D7Z0H8bnQW/SjT6t6WN8lUfe56OJQaY9NV/IF57xK7AuuPiq",
	"N+gNcGdTgRaV4kP+moYQP35KZ90XleqL2k/7C9xXxvnu4f8otCzAslJ8AQbXynmlJ0T0DMXZS5LHACGU",
	"KC1Gkg/5+4hYPH5w/q2RN81Rgw7NTVUVsYz3f3eB5gJI8dcWCFPmE4hWzSW17AxmjFa04edtDYRHVxk8",
	"DNRyOBgkmLHOc3BuXBch8TGUb1ILQ5sqARtQRi7Qylfdlb9ZoyeRRoxdgC02KqIu/KMFJ3TsidDUGq4r",
	"rBiSQVyTcVeXpbA3K0RHE0uABKKKRLsdIxpmAR62zZOr4Di2IDy0TugZEUJ+CimZN9SzOG+okdsGlFcb",
	"GD0nX+QWkNAqzJypcNNQANogeDP4X1cyYFk5DCet+m9q/2OhX3g2Ac8uLkYniC6KPurZO3itFM8FytDe",
	"Prb2fSHlZpQdSUngat9bVmF1JCXdQ54MU+Ei3vUdxx+MqZ2NUx5Kt83K+FbQFGJhrbjZaPJu2N2F4Gg7",
	"bTwVBWPVH3cgdqQ9WC2KgBPWBG95cdsLwDZwk3AZb6spxBYqQHUCCcTiZIArdk5AnZPrdUulch6D4Hi6",
	"Ov01AEGrILwSuLXQINmIoiCica18XI0P3lDvzuiLqjBCMnpJ8Ya516mMDjfdXVPa5B78gfMW+8KV4Cx6",
	"1Uul0Y1ur9oJwZnxsCdp3TxPbT22ErzAw0C7m8xO5OvDUrVeHthe1Za2WV0Mbs9RXLYhMSnwz5OZO59x",
	"TM1g2Tzjh4M3XcfODGvM+3Z6p+r9MMzQ7bEI94Z9As0qiVEsN7LYbXienW9EUfMYjFfK+B7MmvfgjHhD",
	"TOJrsdKsVJrus6toOwXfcF0lrCjBg3V0nV+L7wkz4wVpWvC1xQ5bhZcWP11elOOj8jphZSlW3HiD/3Qv",
	"6D8q/5KPsdPrcO4/BafSzPSyTNLNocHT5U0YHJ2sgZae53frpulFk14jU7WX3l2frJ2OXy32u/DGLytb",
	"SZkWPmJHfdqczN+vpV5iLgXb7eUaRTeVa9zimcr1rsiI5Zqs/l6uH6VcUyxT5RrN3434yNHWvYyxAxrL",
	"4jOd0HLxRNNLkeN5+C7xRNwY3ui7YaLPNvtBjfEzwlb83+OZ7DnAvb+86FSHEgnP2xnx28CMBIWH+Ty8",
	"uStsIm069Z02H4s2KZYNbc7nfwYAAP//JubCOKQkAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
