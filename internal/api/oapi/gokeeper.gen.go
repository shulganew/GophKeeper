// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Card defines model for Card.
type Card struct {
	// CardID id card data
	CardID string `json:"cardID"`

	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Gfile defines model for Gfile.
type Gfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`

	// GfileID file id - secret_id in DB.
	GfileID string `json:"gfileID"`
}

// Gtext defines model for Gtext.
type Gtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// GtextID id card data
	GtextID string `json:"gtextID"`

	// Note main text data
	Note string `json:"note"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// NewGfile defines model for NewGfile.
type NewGfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`
}

// NewGtext defines model for NewGtext.
type NewGtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Note main text data
	Note string `json:"note"`
}

// NewSite defines model for NewSite.
type NewSite struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Users email
	Email string `json:"email"`

	// Login User login from registration
	Login string `json:"login"`

	// Password User pass from registartion
	Password string `json:"password"`
}

// Site defines model for Site.
type Site struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// SiteID site id (credintial_id)
	SiteID string `json:"siteID"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = NewUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = NewCard

// UpdateCardJSONRequestBody defines body for UpdateCard for application/json ContentType.
type UpdateCardJSONRequestBody = Card

// AddSiteJSONRequestBody defines body for AddSite for application/json ContentType.
type AddSiteJSONRequestBody = NewSite

// UpdateSiteJSONRequestBody defines body for UpdateSite for application/json ContentType.
type UpdateSiteJSONRequestBody = Site

// AddGtextJSONRequestBody defines body for AddGtext for application/json ContentType.
type AddGtextJSONRequestBody = NewGtext

// UpdateGtextJSONRequestBody defines body for UpdateGtext for application/json ContentType.
type UpdateGtextJSONRequestBody = Gtext

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /auth/register)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// get all users card data
	// (GET /user/card)
	ListCards(w http.ResponseWriter, r *http.Request)
	// Add new debit card
	// (POST /user/card)
	AddCard(w http.ResponseWriter, r *http.Request)
	// update card data by id
	// (PUT /user/card)
	UpdateCard(w http.ResponseWriter, r *http.Request)
	// get all users files data
	// (GET /user/file)
	ListGfiles(w http.ResponseWriter, r *http.Request)
	// Upload file
	// (POST /user/file)
	AddGfile(w http.ResponseWriter, r *http.Request)
	// download file from storage by file ID
	// (GET /user/file/{fileID})
	GetGfile(w http.ResponseWriter, r *http.Request, fileID string)
	// get all users sites data
	// (GET /user/site)
	ListSites(w http.ResponseWriter, r *http.Request)
	// Add new site
	// (POST /user/site)
	AddSite(w http.ResponseWriter, r *http.Request)
	// update site data by id
	// (PUT /user/site)
	UpdateSite(w http.ResponseWriter, r *http.Request)
	// get all users notes data
	// (GET /user/text)
	ListGtexts(w http.ResponseWriter, r *http.Request)
	// Add new text note
	// (POST /user/text)
	AddGtext(w http.ResponseWriter, r *http.Request)
	// update gtext data by id
	// (PUT /user/text)
	UpdateGtext(w http.ResponseWriter, r *http.Request)
	// delet ID
	// (DELETE /user/{secretID})
	DelAny(w http.ResponseWriter, r *http.Request, secretID string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /auth/register)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users card data
// (GET /user/card)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new debit card
// (POST /user/card)
func (_ Unimplemented) AddCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update card data by id
// (PUT /user/card)
func (_ Unimplemented) UpdateCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users files data
// (GET /user/file)
func (_ Unimplemented) ListGfiles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload file
// (POST /user/file)
func (_ Unimplemented) AddGfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// download file from storage by file ID
// (GET /user/file/{fileID})
func (_ Unimplemented) GetGfile(w http.ResponseWriter, r *http.Request, fileID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users sites data
// (GET /user/site)
func (_ Unimplemented) ListSites(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new site
// (POST /user/site)
func (_ Unimplemented) AddSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update site data by id
// (PUT /user/site)
func (_ Unimplemented) UpdateSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users notes data
// (GET /user/text)
func (_ Unimplemented) ListGtexts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new text note
// (POST /user/text)
func (_ Unimplemented) AddGtext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update gtext data by id
// (PUT /user/text)
func (_ Unimplemented) UpdateGtext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delet ID
// (DELETE /user/{secretID})
func (_ Unimplemented) DelAny(w http.ResponseWriter, r *http.Request, secretID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCard operation middleware
func (siw *ServerInterfaceWrapper) AddCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCard operation middleware
func (siw *ServerInterfaceWrapper) UpdateCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGfiles operation middleware
func (siw *ServerInterfaceWrapper) ListGfiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGfiles(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGfile operation middleware
func (siw *ServerInterfaceWrapper) AddGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGfile operation middleware
func (siw *ServerInterfaceWrapper) GetGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileID" -------------
	var fileID string

	err = runtime.BindStyledParameterWithOptions("simple", "fileID", chi.URLParam(r, "fileID"), &fileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGfile(w, r, fileID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSites operation middleware
func (siw *ServerInterfaceWrapper) ListSites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSites(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddSite operation middleware
func (siw *ServerInterfaceWrapper) AddSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSite operation middleware
func (siw *ServerInterfaceWrapper) UpdateSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGtexts operation middleware
func (siw *ServerInterfaceWrapper) ListGtexts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGtexts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGtext operation middleware
func (siw *ServerInterfaceWrapper) AddGtext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGtext(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateGtext operation middleware
func (siw *ServerInterfaceWrapper) UpdateGtext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGtext(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DelAny operation middleware
func (siw *ServerInterfaceWrapper) DelAny(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "secretID" -------------
	var secretID string

	err = runtime.BindStyledParameterWithOptions("simple", "secretID", chi.URLParam(r, "secretID"), &secretID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secretID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DelAny(w, r, secretID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/card", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/card", wrapper.AddCard)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/card", wrapper.UpdateCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/file", wrapper.ListGfiles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/file", wrapper.AddGfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/file/{fileID}", wrapper.GetGfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/site", wrapper.ListSites)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/site", wrapper.AddSite)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/site", wrapper.UpdateSite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/text", wrapper.ListGtexts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/text", wrapper.AddGtext)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/text", wrapper.UpdateGtext)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{secretID}", wrapper.DelAny)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
