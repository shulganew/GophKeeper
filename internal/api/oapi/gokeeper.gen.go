// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Card defines model for Card.
type Card struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`

	// UserID id card data
	UserID *string `json:"userID,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// NewSite defines model for NewSite.
type NewSite struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Users email
	Email string `json:"email"`

	// Login User login from registration
	Login string `json:"login"`

	// Password User pass from registartion
	Password string `json:"password"`
}

// Site defines model for Site.
type Site struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// SiteID site id (credintial_id)
	SiteID string `json:"siteID"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = NewUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = NewCard

// AddSiteJSONRequestBody defines body for AddSite for application/json ContentType.
type AddSiteJSONRequestBody = NewSite

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /api/auth/register)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Add new debit card
	// (POST /api/user/card/add)
	AddCard(w http.ResponseWriter, r *http.Request)
	// get all users card data
	// (GET /api/user/card/list)
	ListCards(w http.ResponseWriter, r *http.Request)
	// Add new site
	// (POST /api/user/site/add)
	AddSite(w http.ResponseWriter, r *http.Request)
	// get all users sites data
	// (GET /api/user/site/list)
	ListSites(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /api/auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /api/auth/register)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new debit card
// (POST /api/user/card/add)
func (_ Unimplemented) AddCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users card data
// (GET /api/user/card/list)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new site
// (POST /api/user/site/add)
func (_ Unimplemented) AddSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users sites data
// (GET /api/user/site/list)
func (_ Unimplemented) ListSites(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCard operation middleware
func (siw *ServerInterfaceWrapper) AddCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddSite operation middleware
func (siw *ServerInterfaceWrapper) AddSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSites operation middleware
func (siw *ServerInterfaceWrapper) ListSites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSites(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/register", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/card/add", wrapper.AddCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/card/list", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/site/add", wrapper.AddSite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/site/list", wrapper.ListSites)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXX2/bNhD/KgQ3oB2gWm7aPcxPy5KgMxakw7JgD0UxsOJZ4iqR6pGykwX+7sMdJUeO",
	"5Nro0jYPfbJM3n/++LvjrcxcVTsLNng5u5U+K6BS/HmiUNOvKsvXCzl7cyu/R1jImfwuvdNJW4X0Alas",
	"sE5uZY2uBgwG2E7jAeen9KXBZ2jqYJyVM2m0yBRqoVVQMpELh5UKciZ9QGNzmchwU8Pd//U6kQgfGoOg",
	"5eyNJN35qXy7frtO5BmiQ3Kx7TpzGoaOWVjwXs+tseHF0Z1XYwPkgHKdyAq8V/lOQ9323oCjw06cwu6K",
	"Ngw8s0N3GYI2IRbNNtU7wKHPRGbL5Ygq6SwBzcJkitbEUpUNjOnDdT3Uh+va4Kh4UeqheOFKPRbd/Ypk",
	"VkaHMexorS3MpQkwLIyGhbEmurnv9cRVlbPCQxYAg+hvjgTuW/vbNsiruPrjfFSjdLkZ8cvLYuFQsM0x",
	"zXo1VKuV9yuHH1G8V65e7m34m5iii7ZyVx5G7gJUypTDKEjYi7g5EvmOlElLtHmjqwRCbnxAtavYba56",
	"hyXa7htSOG7oXkG63DfWkzZLKkSHn4PpixWG9EWFHqMvWhdGi6d8LW0wqvzb6B8+gclaD8RktGXswkXy",
	"skFloXd2UtUmgKp+9iuV54AT42QirarI+GVcE8e/z8WfoCqZyAZJqQih9rM07Smtk3vJvHJ18RtADSiM",
	"F8rDhwZNuBFdZYUHXJoMxFP64BPDQLmWJgPrudBtHMe1ygoQR5PpIILVajVRvD1xmKetrk/P5ydnF5dn",
	"z44m00kRqpLiC4CVf724jH5H00hZJqX6mlCSzDx3+MSLV+495yITuQT0McXnk+lkSpZdDVbVRs7kC14i",
	"/ISCzzpVtUlVE4p0g/va+TA8/F+V1SWgqNR7EHBtfDA2F9TpBKmLp6xPBSIo8bWYazmT5y1i6fjBh1+c",
	"vumOGiz7UXVdthyd/uMjzUWQ0tceCPPNZxBth8tuxQWsBEv04RewAcajrx0dBnk5mk5HmLHJMvB+0ZTx",
	"4lMpX44Jxq6ogfqd4BRY8vlQ8i90Nm9pxOEGbBGeC9WU4cGKEweEkdI0Fq5r6hhaQCuTSN9UlcKbLaLj",
	"jTuARKJqiXY/RiysIjywz5Pb4DhBUAF6J/QFEcJ5Kq1FcCIUIHxw3O/3AeX5DkbPOBe9ByQsRTenUL6I",
	"DaAPgpfTn4aaEcvGUzlZ6scx+yfKPgkihyCuruanhC6uPvl5dPDaap4blFG8Kc1tqdJ6N8qOtWZw9Ufp",
	"bVgda81D5mfDVJz7h7nzLPWpmDo4OBOg8vuibJ8mXSNWiOpm5zU4DLuHEBybsy5wU3Bo/v0IYuc2AFpV",
	"RpzwREjFaweoxwLYDm4a3rVPkTHEliZCNYcRxNJmhCtNTsCTk58MW6XxgY7Ny/Hu9HUAQlFBfLh6kj+a",
	"vhxmeOFEF93Xx1AZh5PHBCKiZVWWTMm+x1zbSKLoD+M+zrMHJiGe8VrSzhbK6k1fmYzx42V8TH0mfowP",
	"i0fNj+3b5xs/PhQ/+njmAzzvZ8b/B2biJzrML8Oah8KmZU3PgX1jzYdgTa5lR5vr9X8BAAD//1XaNB3I",
	"FQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
