// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Card defines model for Card.
type Card struct {
	// CardID id card data
	CardID string `json:"cardID"`

	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Gfile defines model for Gfile.
type Gfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`

	// GfileID file id - secret_id in DB.
	GfileID string `json:"gfileID"`

	// StorageID storage - id in minio storage.
	StorageID string `json:"storageID"`
}

// Gtext defines model for Gtext.
type Gtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// GtextID id card data
	GtextID string `json:"gtextID"`

	// Note main text data
	Note string `json:"note"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// NewGfile defines model for NewGfile.
type NewGfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`
}

// NewGtext defines model for NewGtext.
type NewGtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Note main text data
	Note string `json:"note"`
}

// NewSite defines model for NewSite.
type NewSite struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Users email
	Email string `json:"email"`

	// Login User login from registration
	Login string `json:"login"`

	// Password User pass from registartion
	Password string `json:"password"`
}

// Site defines model for Site.
type Site struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// SiteID site id (credintial_id)
	SiteID string `json:"siteID"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = NewUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = NewCard

// AddGtextJSONRequestBody defines body for AddGtext for application/json ContentType.
type AddGtextJSONRequestBody = NewGtext

// AddSiteJSONRequestBody defines body for AddSite for application/json ContentType.
type AddSiteJSONRequestBody = NewSite

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /api/auth/register)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Add new debit card
	// (POST /api/user/card/add)
	AddCard(w http.ResponseWriter, r *http.Request)
	// get all users card data
	// (GET /api/user/card/list)
	ListCards(w http.ResponseWriter, r *http.Request)
	// Upload file
	// (POST /api/user/file/add)
	AddGfile(w http.ResponseWriter, r *http.Request)
	// Add new text note
	// (POST /api/user/gtext/add)
	AddGtext(w http.ResponseWriter, r *http.Request)
	// get all users notes data
	// (GET /api/user/gtext/list)
	ListGtexts(w http.ResponseWriter, r *http.Request)
	// Add new site
	// (POST /api/user/site/add)
	AddSite(w http.ResponseWriter, r *http.Request)
	// get all users sites data
	// (GET /api/user/site/list)
	ListSites(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /api/auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /api/auth/register)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new debit card
// (POST /api/user/card/add)
func (_ Unimplemented) AddCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users card data
// (GET /api/user/card/list)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload file
// (POST /api/user/file/add)
func (_ Unimplemented) AddGfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new text note
// (POST /api/user/gtext/add)
func (_ Unimplemented) AddGtext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users notes data
// (GET /api/user/gtext/list)
func (_ Unimplemented) ListGtexts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new site
// (POST /api/user/site/add)
func (_ Unimplemented) AddSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users sites data
// (GET /api/user/site/list)
func (_ Unimplemented) ListSites(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCard operation middleware
func (siw *ServerInterfaceWrapper) AddCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGfile operation middleware
func (siw *ServerInterfaceWrapper) AddGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGtext operation middleware
func (siw *ServerInterfaceWrapper) AddGtext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGtext(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGtexts operation middleware
func (siw *ServerInterfaceWrapper) ListGtexts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGtexts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddSite operation middleware
func (siw *ServerInterfaceWrapper) AddSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSites operation middleware
func (siw *ServerInterfaceWrapper) ListSites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSites(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/register", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/card/add", wrapper.AddCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/card/list", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/file/add", wrapper.AddGfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/gtext/add", wrapper.AddGtext)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/gtext/list", wrapper.ListGtexts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/site/add", wrapper.AddSite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/site/list", wrapper.ListSites)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tc2HapuEZds2F4u/AwAA///LCZtkGCAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
