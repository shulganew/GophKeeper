// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Card defines model for Card.
type Card struct {
	// CardID id card data
	CardID string `json:"cardID"`

	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Gfile defines model for Gfile.
type Gfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`

	// GfileID file id - secret_id in DB.
	GfileID string `json:"gfileID"`

	// StorageID storage - id in minio storage.
	StorageID string `json:"storageID"`
}

// Gtext defines model for Gtext.
type Gtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// GtextID id card data
	GtextID string `json:"gtextID"`

	// Note main text data
	Note string `json:"note"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Ccn credit card number
	Ccn string `json:"ccn"`

	// Cvv card verification value
	Cvv string `json:"cvv"`

	// Definition Common sectert description
	Definition string `json:"definition"`

	// Exp expire
	Exp string `json:"exp"`

	// Hld holder
	Hld string `json:"hld"`
}

// NewGfile defines model for NewGfile.
type NewGfile struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Fname File name on the user's side
	Fname string `json:"fname"`

	// StorageID storage - id in minio storage.
	StorageID string `json:"storageID"`
}

// NewGtext defines model for NewGtext.
type NewGtext struct {
	// Definition Common sectert header
	Definition string `json:"definition"`

	// Note main text data
	Note string `json:"note"`
}

// NewSite defines model for NewSite.
type NewSite struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Users email
	Email string `json:"email"`

	// Login User login from registration
	Login string `json:"login"`

	// Password User pass from registartion
	Password string `json:"password"`
}

// Site defines model for Site.
type Site struct {
	// Definition Common sectert description
	Definition string `json:"definition"`

	// Site Site URL
	Site string `json:"site"`

	// SiteID site id (credintial_id)
	SiteID string `json:"siteID"`

	// Slogin login for site
	Slogin string `json:"slogin"`

	// Spw passwor for site
	Spw string `json:"spw"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = NewUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = NewCard

// AddGtextJSONRequestBody defines body for AddGtext for application/json ContentType.
type AddGtextJSONRequestBody = NewGtext

// AddSiteJSONRequestBody defines body for AddSite for application/json ContentType.
type AddSiteJSONRequestBody = NewSite

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /api/auth/register)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Add new debit card
	// (POST /api/user/card/add)
	AddCard(w http.ResponseWriter, r *http.Request)
	// get all users card data
	// (GET /api/user/card/list)
	ListCards(w http.ResponseWriter, r *http.Request)
	// Upload file
	// (POST /api/user/file/add)
	AddGfile(w http.ResponseWriter, r *http.Request)
	// get all users files data
	// (GET /api/user/file/list)
	ListGfiles(w http.ResponseWriter, r *http.Request)
	// download file from storage by file ID
	// (GET /api/user/file/{fileID})
	GetGfile(w http.ResponseWriter, r *http.Request, fileID string)
	// Add new text note
	// (POST /api/user/gtext/add)
	AddGtext(w http.ResponseWriter, r *http.Request)
	// get all users notes data
	// (GET /api/user/gtext/list)
	ListGtexts(w http.ResponseWriter, r *http.Request)
	// Add new site
	// (POST /api/user/site/add)
	AddSite(w http.ResponseWriter, r *http.Request)
	// get all users sites data
	// (GET /api/user/site/list)
	ListSites(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /api/auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /api/auth/register)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new debit card
// (POST /api/user/card/add)
func (_ Unimplemented) AddCard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users card data
// (GET /api/user/card/list)
func (_ Unimplemented) ListCards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload file
// (POST /api/user/file/add)
func (_ Unimplemented) AddGfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users files data
// (GET /api/user/file/list)
func (_ Unimplemented) ListGfiles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// download file from storage by file ID
// (GET /api/user/file/{fileID})
func (_ Unimplemented) GetGfile(w http.ResponseWriter, r *http.Request, fileID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new text note
// (POST /api/user/gtext/add)
func (_ Unimplemented) AddGtext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users notes data
// (GET /api/user/gtext/list)
func (_ Unimplemented) ListGtexts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new site
// (POST /api/user/site/add)
func (_ Unimplemented) AddSite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get all users sites data
// (GET /api/user/site/list)
func (_ Unimplemented) ListSites(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCard operation middleware
func (siw *ServerInterfaceWrapper) AddCard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCard(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCards operation middleware
func (siw *ServerInterfaceWrapper) ListCards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCards(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGfile operation middleware
func (siw *ServerInterfaceWrapper) AddGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGfiles operation middleware
func (siw *ServerInterfaceWrapper) ListGfiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGfiles(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGfile operation middleware
func (siw *ServerInterfaceWrapper) GetGfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileID" -------------
	var fileID string

	err = runtime.BindStyledParameterWithOptions("simple", "fileID", chi.URLParam(r, "fileID"), &fileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGfile(w, r, fileID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddGtext operation middleware
func (siw *ServerInterfaceWrapper) AddGtext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGtext(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGtexts operation middleware
func (siw *ServerInterfaceWrapper) ListGtexts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGtexts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddSite operation middleware
func (siw *ServerInterfaceWrapper) AddSite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSites operation middleware
func (siw *ServerInterfaceWrapper) ListSites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSites(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/auth/register", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/card/add", wrapper.AddCard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/card/list", wrapper.ListCards)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/file/add", wrapper.AddGfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/file/list", wrapper.ListGfiles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/file/{fileID}", wrapper.GetGfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/gtext/add", wrapper.AddGtext)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/gtext/list", wrapper.ListGtexts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/site/add", wrapper.AddSite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/site/list", wrapper.ListSites)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
